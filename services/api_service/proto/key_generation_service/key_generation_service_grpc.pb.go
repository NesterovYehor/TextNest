// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: key_generation/key_generation_service.proto

package key_generation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyGenerator_GetKey_FullMethodName        = "/keygenerator.KeyGenerator/GetKey"
	KeyGenerator_ReallocateKey_FullMethodName = "/keygenerator.KeyGenerator/ReallocateKey"
)

// KeyGeneratorClient is the client API for KeyGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the service with only the required methods
type KeyGeneratorClient interface {
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
	ReallocateKey(ctx context.Context, in *ReallocateKeyRequest, opts ...grpc.CallOption) (*ReallocateKeyResponse, error)
}

type keyGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyGeneratorClient(cc grpc.ClientConnInterface) KeyGeneratorClient {
	return &keyGeneratorClient{cc}
}

func (c *keyGeneratorClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, KeyGenerator_GetKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyGeneratorClient) ReallocateKey(ctx context.Context, in *ReallocateKeyRequest, opts ...grpc.CallOption) (*ReallocateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReallocateKeyResponse)
	err := c.cc.Invoke(ctx, KeyGenerator_ReallocateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyGeneratorServer is the server API for KeyGenerator service.
// All implementations must embed UnimplementedKeyGeneratorServer
// for forward compatibility.
//
// Define the service with only the required methods
type KeyGeneratorServer interface {
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	ReallocateKey(context.Context, *ReallocateKeyRequest) (*ReallocateKeyResponse, error)
	mustEmbedUnimplementedKeyGeneratorServer()
}

// UnimplementedKeyGeneratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyGeneratorServer struct{}

func (UnimplementedKeyGeneratorServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedKeyGeneratorServer) ReallocateKey(context.Context, *ReallocateKeyRequest) (*ReallocateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReallocateKey not implemented")
}
func (UnimplementedKeyGeneratorServer) mustEmbedUnimplementedKeyGeneratorServer() {}
func (UnimplementedKeyGeneratorServer) testEmbeddedByValue()                      {}

// UnsafeKeyGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyGeneratorServer will
// result in compilation errors.
type UnsafeKeyGeneratorServer interface {
	mustEmbedUnimplementedKeyGeneratorServer()
}

func RegisterKeyGeneratorServer(s grpc.ServiceRegistrar, srv KeyGeneratorServer) {
	// If the following call pancis, it indicates UnimplementedKeyGeneratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyGenerator_ServiceDesc, srv)
}

func _KeyGenerator_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyGeneratorServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyGenerator_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyGeneratorServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyGenerator_ReallocateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReallocateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyGeneratorServer).ReallocateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyGenerator_ReallocateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyGeneratorServer).ReallocateKey(ctx, req.(*ReallocateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyGenerator_ServiceDesc is the grpc.ServiceDesc for KeyGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keygenerator.KeyGenerator",
	HandlerType: (*KeyGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKey",
			Handler:    _KeyGenerator_GetKey_Handler,
		},
		{
			MethodName: "ReallocateKey",
			Handler:    _KeyGenerator_ReallocateKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key_generation/key_generation_service.proto",
}
